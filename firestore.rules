rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isProjectParticipant(projectId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/projects/$(projectId)) &&
        (
          get(/databases/$(database)/documents/projects/$(projectId)).data.clientId == request.auth.uid ||
          get(/databases/$(database)/documents/projects/$(projectId)).data.freelancerId == request.auth.uid
        )
      );
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isProjectParticipant(projectId);
      allow delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
    }

    // Project Documents collection
    match /project_documents/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.clientId == request.auth.uid;
    }

    // Notifications collection - simplified rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // ✅ Freelancer Profiles - public read, self write
    match /freelancer_profiles/{userId} {
      allow read: if true; // Public access for Explore
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // ✅ Subcollections under freelancer_profiles (e.g., reviews, certificates)
    match /freelancer_profiles/{userId}/{subCollection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ✅ Client Registration - private access
    match /client_registration/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ✅ Proposals - freelancer creates/updates; client (project owner) accepts
    match /proposals/{proposalId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null
        && request.resource.data.freelancerId == request.auth.uid
        && request.resource.data.projectId is string;

      allow update: if request.auth != null
        // "Freelancer edits their own proposal" OR "Client editing a proposal on a project they own"
        && (
             resource.data.freelancerId == request.auth.uid
             ||
             (
               resource.data.projectId != null
               && get(
                    /databases/$(database)/documents/projects/$(resource.data.projectId)
                  ).data.clientId == request.auth.uid
             )
           );
    }

    // ✅ Freelancer Skills - public read, auth write
    match /freelancer_skills/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // ✅ Accepted Proposals - UPDATED: allow both clients and freelancers to read/update
    match /accepted_proposals/{docId} {
      // Allow client to create an accepted proposal
      allow create: if request.auth != null
        && request.resource.data.clientId == request.auth.uid;

      // Allow both freelancer and client to read
      allow read: if request.auth != null
        && (
             resource.data.clientId     == request.auth.uid
             || resource.data.freelancerId == request.auth.uid
           );

      // Allow both freelancer and client to update (for status changes, delivery, etc.)
      allow update: if request.auth != null
        && (
             resource.data.clientId     == request.auth.uid
             || resource.data.freelancerId == request.auth.uid
           );
    }

    // ✅ NEW: Project Timeline/Updates - allow project participants
    match /project_updates/{updateId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null;
    }

    // ✅ NEW: Conversations - allow participants
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null;
    }

    // Allow all authenticated access for other paths
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
} 